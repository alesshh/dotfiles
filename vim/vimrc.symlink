call plug#begin()
"
" Source search and tree visualization
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

Plug 'mhinz/vim-grepper'

Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'scrooloose/nerdtree'

" Formatters
Plug 'w0rp/ale'

" Language packs
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'elixir-editors/vim-elixir'
Plug 'pangloss/vim-javascript'
Plug 'maxmellon/vim-jsx-pretty'

Plug 'mattn/emmet-vim'

" Auto close pairs
Plug 'cohama/lexima.vim'

" Comments
Plug 'tpope/vim-commentary'

" Git
Plug 'tpope/vim-fugitive'
Plug 'rhysd/git-messenger.vim'

" Lipstick
Plug 'morhetz/gruvbox'
Plug 'wakatime/vim-wakatime'

call plug#end()

" Theme settings
if has('gui_macvim')
  set guifont=Source\ Code\ Pro:h13
endif

set termguicolors
set background=dark

let g:gruvbox_contrast_dark="hard"
colorscheme gruvbox

set laststatus=2
" Editor settings
set number
set relativenumber
set cursorline
set mouse=a
set clipboard=unnamed
set laststatus=0
set guicursor=

" Auto save on :make
set autowrite

" Use git
set nobackup
set noswapfile

" keep only tabs at gui
set guioptions=


" Convert tabs
set expandtab
set shiftwidth=2

" Go settings
let g:go_fmt_command = "goimports"

" Leader shortcuts
let mapleader=","

" Reload vim source
nnoremap <leader>sv :so $MYVIMRC<cr>

" Explorer
function! NerdTreeToggleFind()
    if exists("g:NERDTree") && g:NERDTree.IsOpen()
        NERDTreeClose
    elseif filereadable(expand('%'))
        NERDTreeFind
    else
        NERDTree
    endif
endfunction

nnoremap <leader>\ :call NerdTreeToggleFind()<CR>

" Tabs navigation
nnoremap <leader>1 1gt
nnoremap <leader>2 2gt
nnoremap <leader>3 3gt
nnoremap <leader>4 4gt
nnoremap <leader>5 5gt
nnoremap <leader>6 6gt
nnoremap <leader>7 7gt
nnoremap <leader>8 8gt
nnoremap <leader>9 9gt
nnoremap <leader>0 :tablast<CR>

" Go hard or go home
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
nnoremap <leader>\ :NERDTreeToggle<CR>

" Quick fix list
nnoremap <leader>a :cclose<CR>
map <c-n> :cnext<CR>
map <c-m> :cprevious<CR>

" Go shortcuts
autocmd FileType go nmap <leader>b  <Plug>(go-build)
autocmd FileType go nmap <leader>r  <Plug>(go-run)

" Ctrl shortcuts
nnoremap <c-p> :Files<cr>
nnoremap <c-f> :Rg<cr>

" switch to last used buffer
nnoremap <leader>; :e#<CR>

" Move selection 1 line down or up
vnoremap J :m '>+1gv=gv<cr>
vnoremap K :m '<-2gv=gv<cr>

" Copy file name
command! CopyFileName :let @+ = expand("%:t")
command! CopyFilePath :let @+ = expand("%:p")
command! CopyRelativeFilePath :let @+ = expand("%")

" Ale
let g:ale_fixers = {}
let g:ale_fixers["*"] = ["remove_trailing_lines", "trim_whitespace"]
let g:ale_fixers["javascript"] = ["prettier"]
let g:ale_fixers["javascript.jsx"] = ["prettier"]
let g:ale_fixers["json"] = ["prettier"]
let g:ale_fixers["html"] = ["prettier"]
let g:ale_fixers["css"] = ["prettier"]
let g:ale_fixers["scss"] = ["prettier"]
let g:ale_fixers["yaml"] = ["prettier"]
let g:ale_fixers["elixir"] = ["mix_format"]
let g:ale_fixers["ruby"] = ["rubocop"]
"let g:ale_linters_explicit = 1
" let g:ale_fix_on_save = 1
let g:ale_completion_enabled = 1
let g:ale_set_quickfix = 1

nmap <leader>gm <Plug>(git-messenger)
nmap <leader>f <Plug>(ale_fix)

let g:fzf_colors = {}

let g:fzf_colors.fg      = ['fg', 'GruvboxFg1']
let g:fzf_colors.bg      = ['fg', 'GruvboxBg0']
let g:fzf_colors.hl      = ['fg', 'GruvboxRed']
let g:fzf_colors['fg+']  = ['fg', 'GruvboxGreen']
let g:fzf_colors['bg+']  = ['fg', 'GruvboxBg1']
let g:fzf_colors['hl+']  = ['fg', 'GruvboxRed']
let g:fzf_colors.info    = ['fg', 'GruvboxOrange']
let g:fzf_colors.border  = ['fg', 'GruvboxBg0']
let g:fzf_colors.prompt  = ['fg', 'GruvboxAqua']
let g:fzf_colors.pointer = ['fg', 'GruvboxOrange']
let g:fzf_colors.marker  = ['fg', 'GruvboxYellow']
let g:fzf_colors.spinner = ['fg', 'GruvboxGreen']
let g:fzf_colors.header  = ['fg', 'GruvboxBlue']

" set encoding=UTF-8

call plug#begin()

" Source search and tree visualization
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Language packs
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'elixir-editors/vim-elixir'
Plug 'pangloss/vim-javascript'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'sheerun/vim-polyglot'

Plug 'mattn/emmet-vim'

" Auto close pairs
Plug 'cohama/lexima.vim'

" Comments
Plug 'tpope/vim-commentary'

" Git
Plug 'tpope/vim-fugitive'

"" Lipstick
Plug 'ap/vim-css-color'
Plug 'itchyny/lightline.vim'
Plug 'cormacrelf/vim-colors-github'

call plug#end()
set termguicolors
colorscheme github

let g:lightline={ 'colorscheme': 'github' }

" Editor settings
set clipboard=unnamed
set cursorline
set guicursor=
set guioptions=
set laststatus=2
set mouse=a
set number
set relativenumber

" Auto save on :make
set autowrite

" Use git
set nobackup
set noswapfile

" Convert tabs
set expandtab
set shiftwidth=2

" Go settings
let g:go_fmt_command = "goimports"

" Leader shortcuts
let mapleader=","

" Reload vim source
nnoremap <leader>so :so $MYVIMRC<cr>

nnoremap <leader>\ :Explore<CR>

" Tabs navigation
nnoremap <leader>1 1gt
nnoremap <leader>2 2gt
nnoremap <leader>3 3gt
nnoremap <leader>4 4gt
nnoremap <leader>5 5gt
nnoremap <leader>6 6gt
nnoremap <leader>7 7gt
nnoremap <leader>8 8gt
nnoremap <leader>9 9gt
nnoremap <leader>0 :tablast<CR>

" Go hard or go home
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>

"" Go shortcuts
"autocmd FileType go nmap <leader>b  <Plug>(go-build)
"autocmd FileType go nmap <leader>r  <Plug>(go-run)

" Ctrl shortcuts
nnoremap <c-p> :Files<cr>
nnoremap <c-g> :GFiles<cr>

" Move selection 1 line down or up
vnoremap J :m '>+1gv=gv<cr>
vnoremap K :m '<-2gv=gv<cr>

" Copy file name
command! CopyFileName :let @+ = expand("%:t")
command! CopyFilePath :let @+ = expand("%:p")
command! CopyRelativeFilePath :let @+ = expand("%")

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Formatting selected code.
command! -nargs=0 Format :call CocAction('format')
xmap <leader>f :Format<CR>
nmap <leader>f :Format<CR>
